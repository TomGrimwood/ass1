$date
	Tue Aug 24 15:09:12 2021
$end
$version
	Icarus Verilog
$end
$timescale
	100ms
$end
$scope module TaskFive_tb $end
$var wire 4 ! bcdO_2 [3:0] $end
$var wire 4 " bcdO_1 [3:0] $end
$var wire 4 # bcdO_0 [3:0] $end
$var reg 4 $ bcdA_0 [3:0] $end
$var reg 4 % bcdA_1 [3:0] $end
$var reg 4 & bcdB_0 [3:0] $end
$var reg 4 ' bcdB_1 [3:0] $end
$scope module Z1 $end
$var wire 4 ( bcdA_0 [3:0] $end
$var wire 4 ) bcdA_1 [3:0] $end
$var wire 4 * bcdB_0 [3:0] $end
$var wire 4 + bcdB_1 [3:0] $end
$var wire 4 , carryOnes [3:0] $end
$var wire 4 - bcdO_2 [3:0] $end
$var wire 4 . bcdO_1 [3:0] $end
$var wire 4 / bcdO_0 [3:0] $end
$scope module AddOnes $end
$var wire 4 0 a [3:0] $end
$var wire 4 1 b [3:0] $end
$var wire 1 2 c $end
$var wire 4 3 s1 [3:0] $end
$var wire 4 4 s0 [3:0] $end
$var wire 3 5 cWire [2:0] $end
$var wire 5 6 adderOutput [4:0] $end
$scope module F1 $end
$var wire 1 7 a $end
$var wire 1 8 b $end
$var wire 1 2 cIn $end
$var wire 1 9 s $end
$var wire 1 : w1 $end
$var wire 1 ; cOut $end
$scope module M1 $end
$var wire 1 ; f $end
$var wire 1 : s $end
$var wire 1 8 x1 $end
$var wire 1 2 x2 $end
$upscope $end
$upscope $end
$scope module F2 $end
$var wire 1 < a $end
$var wire 1 = b $end
$var wire 1 > cIn $end
$var wire 1 ? s $end
$var wire 1 @ w1 $end
$var wire 1 A cOut $end
$scope module M1 $end
$var wire 1 A f $end
$var wire 1 @ s $end
$var wire 1 = x1 $end
$var wire 1 > x2 $end
$upscope $end
$upscope $end
$scope module F3 $end
$var wire 1 B a $end
$var wire 1 C b $end
$var wire 1 D cIn $end
$var wire 1 E s $end
$var wire 1 F w1 $end
$var wire 1 G cOut $end
$scope module M1 $end
$var wire 1 G f $end
$var wire 1 F s $end
$var wire 1 C x1 $end
$var wire 1 D x2 $end
$upscope $end
$upscope $end
$scope module F4 $end
$var wire 1 H a $end
$var wire 1 I b $end
$var wire 1 J cIn $end
$var wire 1 K s $end
$var wire 1 L w1 $end
$var wire 1 M cOut $end
$scope module M1 $end
$var wire 1 M f $end
$var wire 1 L s $end
$var wire 1 I x1 $end
$var wire 1 J x2 $end
$upscope $end
$upscope $end
$scope module adder $end
$var wire 5 N fiveBitsIn [4:0] $end
$var wire 4 O lessThanTenTens [3:0] $end
$var wire 4 P moreThanTenTens [3:0] $end
$var wire 1 Q trueIfTenPlus $end
$var wire 4 R moreThanTenOnes [3:0] $end
$var wire 4 S lessThanTenOnes [3:0] $end
$var wire 4 T digitTens [3:0] $end
$var wire 4 U digitOnes [3:0] $end
$scope module F1 $end
$var wire 4 V x1 [3:0] $end
$var wire 4 W x2 [3:0] $end
$var wire 1 Q s $end
$var wire 4 X f [3:0] $end
$upscope $end
$scope module F2 $end
$var wire 4 Y x1 [3:0] $end
$var wire 4 Z x2 [3:0] $end
$var wire 1 Q s $end
$var wire 4 [ f [3:0] $end
$upscope $end
$scope module G1 $end
$var wire 5 \ fiveBitsIn [4:0] $end
$var wire 1 Q moreThanTen $end
$upscope $end
$upscope $end
$upscope $end
$scope module AddTens $end
$var wire 4 ] a [3:0] $end
$var wire 4 ^ b [3:0] $end
$var wire 1 _ c $end
$var wire 4 ` s1 [3:0] $end
$var wire 4 a s0 [3:0] $end
$var wire 3 b cWire [2:0] $end
$var wire 5 c adderOutput [4:0] $end
$scope module F1 $end
$var wire 1 d a $end
$var wire 1 e b $end
$var wire 1 _ cIn $end
$var wire 1 f s $end
$var wire 1 g w1 $end
$var wire 1 h cOut $end
$scope module M1 $end
$var wire 1 h f $end
$var wire 1 g s $end
$var wire 1 e x1 $end
$var wire 1 _ x2 $end
$upscope $end
$upscope $end
$scope module F2 $end
$var wire 1 i a $end
$var wire 1 j b $end
$var wire 1 k cIn $end
$var wire 1 l s $end
$var wire 1 m w1 $end
$var wire 1 n cOut $end
$scope module M1 $end
$var wire 1 n f $end
$var wire 1 m s $end
$var wire 1 j x1 $end
$var wire 1 k x2 $end
$upscope $end
$upscope $end
$scope module F3 $end
$var wire 1 o a $end
$var wire 1 p b $end
$var wire 1 q cIn $end
$var wire 1 r s $end
$var wire 1 s w1 $end
$var wire 1 t cOut $end
$scope module M1 $end
$var wire 1 t f $end
$var wire 1 s s $end
$var wire 1 p x1 $end
$var wire 1 q x2 $end
$upscope $end
$upscope $end
$scope module F4 $end
$var wire 1 u a $end
$var wire 1 v b $end
$var wire 1 w cIn $end
$var wire 1 x s $end
$var wire 1 y w1 $end
$var wire 1 z cOut $end
$scope module M1 $end
$var wire 1 z f $end
$var wire 1 y s $end
$var wire 1 v x1 $end
$var wire 1 w x2 $end
$upscope $end
$upscope $end
$scope module adder $end
$var wire 5 { fiveBitsIn [4:0] $end
$var wire 4 | lessThanTenTens [3:0] $end
$var wire 4 } moreThanTenTens [3:0] $end
$var wire 1 ~ trueIfTenPlus $end
$var wire 4 !" moreThanTenOnes [3:0] $end
$var wire 4 "" lessThanTenOnes [3:0] $end
$var wire 4 #" digitTens [3:0] $end
$var wire 4 $" digitOnes [3:0] $end
$scope module F1 $end
$var wire 4 %" x1 [3:0] $end
$var wire 4 &" x2 [3:0] $end
$var wire 1 ~ s $end
$var wire 4 '" f [3:0] $end
$upscope $end
$scope module F2 $end
$var wire 4 (" x1 [3:0] $end
$var wire 4 )" x2 [3:0] $end
$var wire 1 ~ s $end
$var wire 4 *" f [3:0] $end
$upscope $end
$scope module G1 $end
$var wire 5 +" fiveBitsIn [4:0] $end
$var wire 1 ~ moreThanTen $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b10 +"
b0 *"
b1 )"
b0 ("
b10 '"
b0 &"
b10 %"
b10 $"
b0 #"
b10 ""
b0 !"
0~
b1 }
b0 |
b10 {
0z
0y
0x
0w
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
1l
1k
0j
0i
1h
0g
0f
1e
1d
b10 c
b1 b
b10 a
b0 `
0_
b1 ^
b1 ]
b10 \
b0 [
b1 Z
b0 Y
b10 X
b0 W
b10 V
b10 U
b0 T
b10 S
b0 R
0Q
b1 P
b0 O
b10 N
0M
0L
0K
0J
0I
0H
0G
0F
0E
0D
0C
0B
0A
0@
1?
1>
0=
0<
1;
0:
09
18
17
b10 6
b1 5
b10 4
b0 3
02
b1 1
b1 0
b10 /
b10 .
b0 -
b0 ,
b1 +
b1 *
b1 )
b1 (
b1 '
b1 &
b1 %
b1 $
b10 #
b10 "
b0 !
$end
#10
b100 #
b100 /
b100 4
b100 U
b100 X
b100 "
b100 .
b100 a
b100 $"
b100 '"
b10 R
b10 W
b10 !"
b10 &"
b100 S
b100 V
b100 ""
b100 %"
0?
b100 6
b100 N
b100 \
1E
0l
b100 c
b100 {
b100 +"
1r
0>
1D
0k
1q
0;
b10 5
1A
0h
b10 b
1n
08
1=
0e
1j
07
1<
0d
1i
b10 &
b10 *
b10 1
b10 '
b10 +
b10 ^
b10 $
b10 (
b10 0
b10 %
b10 )
b10 ]
#20
b1000 #
b1000 /
b1000 4
b1000 U
b1000 X
b1000 "
b1000 .
b1000 a
b1000 $"
b1000 '"
b1000 S
b1000 V
b1000 ""
b1000 %"
0E
b1000 6
b1000 N
b1000 \
1K
0r
b1000 c
b1000 {
b1000 +"
1x
0D
1J
0q
1w
0A
b100 5
1G
0n
b100 b
1t
0=
1C
0j
1p
0<
1B
0i
1o
b100 &
b100 *
b100 1
b100 '
b100 +
b100 ^
b100 $
b100 (
b100 0
b100 %
b100 )
b100 ]
#30
1f
1_
b1 ,
b1 3
b1 T
b1 [
b1000 #
b1000 /
b1000 4
b1000 U
b1000 X
b1 !
b1 -
b1 `
b1 #"
b1 *"
b1001 "
b1001 .
b1001 a
b1001 $"
b1001 '"
b10 S
b10 V
b1000 R
b1000 W
1Q
b11 ""
b11 %"
b1001 !"
b1001 &"
1~
1?
0K
1l
0x
1>
0J
1k
0w
1;
b1 5
0G
b10010 6
b10010 N
b10010 \
1M
1h
b1 b
0t
b10011 c
b10011 {
b10011 +"
1z
18
0C
1I
1e
0p
1v
17
0B
1H
1d
0o
1u
b1001 &
b1001 *
b1001 1
b1001 '
b1001 +
b1001 ^
b1001 $
b1001 (
b1001 0
b1001 %
b1001 )
b1001 ]
#40
