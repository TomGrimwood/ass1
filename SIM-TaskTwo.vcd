$date
	Fri Aug 13 10:47:46 2021
$end
$version
	Icarus Verilog
$end
$timescale
	100ms
$end
$scope module TaskTwo_tb $end
$var wire 7 ! h2 [6:0] $end
$var wire 7 " h1 [6:0] $end
$var reg 4 # v [3:0] $end
$scope module T1 $end
$var wire 4 $ V [3:0] $end
$var wire 1 % untrue $end
$var wire 4 & m [3:0] $end
$var wire 3 ' aOut [2:0] $end
$var wire 1 ( Z $end
$var wire 7 ) HEXTens [6:0] $end
$var wire 7 * HEXOnes [6:0] $end
$scope module A1 $end
$var wire 3 + nibbleIn [2:0] $end
$var wire 3 , nibbleOut [2:0] $end
$upscope $end
$scope module B1 $end
$var wire 4 - w1 [3:0] $end
$var wire 1 ( trueIfTenPlus $end
$var wire 7 . HEX [6:0] $end
$scope module U1 $end
$var wire 4 / SWs [3:0] $end
$var wire 7 0 HEX [6:0] $end
$upscope $end
$upscope $end
$scope module H1 $end
$var wire 4 1 SWs [3:0] $end
$var wire 7 2 HEX [6:0] $end
$upscope $end
$scope module M0 $end
$var wire 1 3 f $end
$var wire 1 4 x1 $end
$var wire 1 5 x2 $end
$var wire 1 ( s $end
$upscope $end
$scope module M1 $end
$var wire 1 6 f $end
$var wire 1 7 x1 $end
$var wire 1 8 x2 $end
$var wire 1 ( s $end
$upscope $end
$scope module M2 $end
$var wire 1 9 f $end
$var wire 1 : x1 $end
$var wire 1 ; x2 $end
$var wire 1 ( s $end
$upscope $end
$scope module M3 $end
$var wire 1 < f $end
$var wire 1 = x1 $end
$var wire 1 % x2 $end
$var wire 1 ( s $end
$upscope $end
$scope module U1 $end
$var wire 4 > nibble [3:0] $end
$var wire 1 ( trueIfTenPlus $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 >
0=
0<
0;
0:
09
18
07
06
05
04
03
b1000000 2
b0 1
b1000000 0
b0 /
b1000000 .
b0 -
b10 ,
b0 +
b1000000 *
b1000000 )
0(
b10 '
b0 &
0%
b0 $
b0 #
b1000000 "
b1000000 !
$end
#10
b1111001 !
b1111001 *
b1111001 2
15
b1 &
b1 1
13
b11 '
b11 ,
b1 +
14
b1 #
b1 $
b1 >
#20
b100100 !
b100100 *
b100100 2
08
03
05
b10 &
b10 1
16
b0 '
b0 ,
04
b10 +
17
b10 #
b10 $
b10 >
#30
b110000 !
b110000 *
b110000 2
15
b11 &
b11 1
13
b1 '
b1 ,
b11 +
14
b11 #
b11 $
b11 >
#40
b11001 !
b11001 *
b11001 2
18
03
06
05
b100 &
b100 1
19
b10 '
b10 ,
04
07
b100 +
1:
b100 #
b100 $
b100 >
#50
b10010 !
b10010 *
b10010 2
15
b101 &
b101 1
13
b11 '
b11 ,
b101 +
14
b101 #
b101 $
b101 >
#60
b10 !
b10 *
b10 2
1;
08
03
05
b110 &
b110 1
16
b100 '
b100 ,
04
b110 +
17
b110 #
b110 $
b110 >
#70
b1111000 !
b1111000 *
b1111000 2
15
b111 &
b111 1
13
b101 '
b101 ,
b111 +
14
b111 #
b111 $
b111 >
#80
b1000000 "
b1000000 )
b1000000 .
b1000000 0
b0 !
b0 *
b0 2
09
03
0;
18
06
05
b1000 &
b1000 1
1<
b10 '
b10 ,
b0 -
b0 /
0(
04
07
b0 +
0:
1=
b1000 #
b1000 $
b1000 >
#90
b10000 !
b10000 *
b10000 2
15
b1001 &
b1001 1
13
b11 '
b11 ,
b1 +
14
b1001 #
b1001 $
b1001 >
#100
b1000000 !
b1000000 *
b1000000 2
b1111001 "
b1111001 )
b1111001 .
b1111001 0
0<
08
03
05
b0 &
b0 1
06
b1 -
b1 /
1(
b0 '
b0 ,
04
b10 +
17
b1010 #
b1010 $
b1010 >
#110
b1111001 !
b1111001 *
b1111001 2
b1 &
b1 1
13
15
b1 '
b1 ,
b11 +
14
b1011 #
b1011 $
b1011 >
#120
b100100 !
b100100 *
b100100 2
16
b10 &
b10 1
03
18
05
b10 '
b10 ,
04
07
b100 +
1:
b1100 #
b1100 $
b1100 >
#130
b110000 !
b110000 *
b110000 2
b11 &
b11 1
13
15
b11 '
b11 ,
b101 +
14
b1101 #
b1101 $
b1101 >
#140
b11001 !
b11001 *
b11001 2
19
06
b100 &
b100 1
03
1;
08
05
b100 '
b100 ,
04
b110 +
17
b1110 #
b1110 $
b1110 >
#150
b10010 !
b10010 *
b10010 2
b101 &
b101 1
13
15
b101 '
b101 ,
b111 +
14
b1111 #
b1111 $
b1111 >
#160
